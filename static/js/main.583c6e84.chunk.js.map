{"version":3,"sources":["MapView.tsx","ProductList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["queryOverpass","require","initialCenter","radii","goldMarker","Icon","iconUrl","shadowUrl","Default","className","redMarker","greenMarker","defaultMarker","MapView","onUpdateMarkets","supermarkets","selectedMarkets","setMap","useState","homePosition","setHomePosition","updateMarkets","queryMarkets","radius","pos","query","lat","lng","fetchMode","then","catch","console","error","MapEvents","useMapEvents","click","e","latlng","locationfound","location","log","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","MapConsumer","map","getCenter","Marker","position","icon","Popup","SplitButton","id","variant","title","onClick","Dropdown","Item","eventKey","toString","Divider","market","_index","_array","lon","data","tags","nullableToString","x","undefined","address","includes","Card","Body","Title","name","brand","Text","Button","_","makeMarket","getMarkets","exampleProducts","0","description","1","image","3","4","exampleCategories","products","ProductCard","product","selected","bg","text","Img","src","ProductList","categories","onSelectProduct","selectedProduct","categoryComponents","category","index","Accordion","Toggle","as","Header","Collapse","ids","defaultActiveKey","App","setProducts","setSelectedProduct","setSupermarkets","setSelectedMarkets","useEffect","filter","Math","random","mapRef","useRef","vw","max","document","documentElement","clientWidth","window","innerWidth","vh","clientHeight","innerHeight","horizontal","Container","fluid","style","height","sizes","onDragEnd","_sizes","current","invalidateSize","direction","gutterSize","markets","filteredIds","Object","keys","Number","filteredProducts","reduce","acc","filterProductsByMarkets","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mXASMA,G,MAAgBC,EAAQ,KAExBC,EAA6B,CAAC,QAAS,QAEvCC,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IASzBC,GALc,IAAIC,OAAK,CACzBC,QAAS,mGACTC,UAAW,kFAGI,IAAIF,OAAKG,QAAQ,CAChCC,UAAW,mBAGTC,EAAY,IAAIL,OAAKG,QAAQ,CAC/BC,UAAW,kBAGTE,EAAc,IAAIN,OAAKG,QAAQ,CACjCC,UAAW,kBAGTG,EAAgB,IAAIP,OAAKG,QAqIhBK,MAjIf,YAMQ,IANWC,EAMZ,EANYA,gBAAiBC,EAM7B,EAN6BA,aAAcC,EAM3C,EAN2CA,gBAAiBC,EAM5D,EAN4DA,OAM5D,EAEqCC,mBAAwB,MAF7D,mBAEIC,EAFJ,KAEkBC,EAFlB,KAIGC,EAAgB,SAACN,GACnBD,EAAgBC,IAGdO,EAAe,SAACC,GAClB,IAAMC,EAAML,EACZ,GAAY,OAARK,EAAJ,CACA,IAAMC,EAAK,+HAIgB,IAATF,EAJP,aAIyBC,EAAIE,IAJ7B,aAIqCF,EAAIG,IAJzC,sCAOX3B,EAAcyB,EAAO,CAAEG,UAAW,SAC7BC,KAAKR,GACLS,MAAMC,QAAQC,SAGvB,SAASC,IAUL,OATAC,YAAa,CACTC,MAAO,SAAAC,GAEHhB,EAAgBgB,EAAEC,SAEtBC,cAAe,SAACC,GACZR,QAAQS,IAAI,kBAAmBD,MAGhC,KAsCX,OACI,eAACE,EAAA,EAAD,CAAcC,OAAQxC,EAAeyC,KAAM,GAAIC,iBAAiB,EAAhE,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAER,cAACd,EAAD,IACA,cAACe,EAAA,EAAD,UACK,SAACC,GAGE,OAFAlB,QAAQS,IAAI,cAAeS,EAAIC,aAC/BjC,EAAOgC,GACA,QAIf,cAACE,EAAA,EAAD,CAAQC,SAAUlD,EAAemD,KAAM3C,EAAvC,SACI,eAAC4C,EAAA,EAAD,qCAC2B,uBAD3B,qCAIHnC,EACG,cAACgC,EAAA,EAAD,CAAQC,SAAUjC,EAAckC,KAAMjD,EAAtC,SACI,eAACkD,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CACIC,GAAG,OACHC,QAAQ,kBACRC,MAAO,aACPC,QAAS,kBAAMrC,EAAa,IAJhC,UAMKnB,EAAM8C,KAAI,SAAA1B,GACP,OACI,cAACqC,EAAA,EAASC,KAAV,CACIC,SAAUvC,EAAOwC,WACjBJ,QAAS,kBAAMrC,EAAaC,IAFhC,2BAIgBA,EAJhB,YAUR,cAACqC,EAAA,EAASI,QAAV,OAnBR,SAuBQ,KAhFL,WACf,GAAqB,OAAjBjD,EAAuB,OAAO,KA6BlC,OAAOA,EAAakC,KAAI,SAACgB,EAAQC,EAAQC,GACrC,OA5BJ,SAAoBF,GAChB,IAAMb,EAAwB,CAACa,EAAOvC,IAAKuC,EAAOG,KAC5CC,EAAOJ,EAAOK,KACdC,EAAmB,SAACC,GACtB,YAAcC,IAAND,EAAkBA,EAAI,IAE5BE,EAAO,UAAMH,EAAiBF,EAAK,gBAA5B,YAA+CE,EAAiBF,EAAK,qBAArE,0BACXE,EAAiBF,EAAK,kBADX,YACgCE,EAAiBF,EAAK,cADtD,kBAGPhB,EAAOrC,EAAgB2D,SAASV,EAAOT,IAAM7C,EAAcC,EAgBjE,OAdI,cAACuC,EAAA,EAAD,CAAQC,SAAUA,EAAqCC,KAAMA,EAA7D,SACI,cAACC,EAAA,EAAD,UACI,cAACsB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UACKT,EAAKU,KAAOV,EAAKU,KAAO,YAE5BV,EAAKW,MAAS,cAACJ,EAAA,EAAKK,KAAN,UAAY,UAAYZ,EAAKW,QAAsB,UACzCP,IAAxBJ,EAAK,eAAgC,eAACO,EAAA,EAAKK,KAAN,WAAYP,EAAZ,OAAqC,KAC3E,cAACQ,EAAA,EAAD,CAAQzB,QAAQ,kBAAkBE,QAAS,SAAAwB,GAAC,OAAI9D,EAAc,CAAC4C,KAA/D,gDATiBA,EAAOT,GAAGO,YAiBxCqB,CAAWnB,MAmDjBoB,O,QCrJAC,G,MAA+B,CACxCC,EAAG,CACCR,KAAM,YACNS,YAAa,uBAEjBC,EAAG,CACCV,KAAM,0CACNS,YAAa,WACbE,MAAO,yFAEXC,EAAG,CACCZ,KAAM,uBACNS,YAAa,oBAEjBI,EAAG,CACCb,KAAM,mBACNS,YAAa,+BAMRK,EAAgC,CACzC,CACId,KAAM,UACNe,SAAU,CACN,EACA,EACA,EACA,EACA,EACA,IAGR,CACIf,KAAM,QACNe,SAAU,CACN,EACA,EACA,EACA,EACA,EACA,KAWZ,SAASC,EAAT,GAAwE,IAAjDC,EAAgD,EAAhDA,QAASrC,EAAuC,EAAvCA,QAASsC,EAA8B,EAA9BA,SACrC,OACI,eAACrB,EAAA,EAAD,CACIjB,QAASA,EACTuC,GAAID,EAAW,eAAYxB,EAC3B0B,KAAMF,EAAW,aAAUxB,EAH/B,UAKKuB,EAAQN,MACJ,cAACd,EAAA,EAAKwB,IAAN,CAAU3C,QAAQ,MAAM4C,IAAKL,EAAQN,MAAOjF,UAAU,gBACpD,qBAAKA,UAAU,gBACtB,eAACmE,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAakB,EAAQjB,OACrB,cAACH,EAAA,EAAKK,KAAN,UACKe,EAAQR,oBAwDdc,MAxCf,YAAoG,IAA7EC,EAA4E,EAA5EA,WAAYT,EAAgE,EAAhEA,SAAUU,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,gBAgBpDC,EAAqBH,EAAWtD,KAAI,SAAC0D,EAAUC,EAAOzC,GACxD,OACI,eAACS,EAAA,EAAD,WACI,cAACiC,EAAA,EAAUC,OAAX,CAAkBC,GAAInC,IAAKoC,OAAQlD,SAAU8C,EAAM7C,WAAnD,SACK4C,EAAS5B,OAEd,cAAC8B,EAAA,EAAUI,SAAX,CAAoBnD,SAAU8C,EAAM7C,WAApC,SACI,cAACa,EAAA,EAAKC,KAAN,UACI,qBAAKpE,UAAU,eAAf,UAtBCyG,EAuBgBP,EAASb,SAtBnCoB,EAAIjE,KAAI,SAACO,GACZ,YAAqBiB,IAAjBqB,EAAStC,GAA0B,KAEnC,cAACuC,EAAD,CACIC,QAASF,EAAStC,GAClBG,QAAS,WAAQ6C,EAAgBhD,IACjCyC,SAAUQ,IAAoBjD,GACzBA,eAQFoD,GAhBC,IAACM,KA+BrB,OACI,cAACL,EAAA,EAAD,CAAWM,iBAAiB,IAA5B,SACKT,K,QC5BEU,MA7Ff,WAAgB,IAAD,EAEmBlG,mBAASoE,GAF5B,mBAENQ,EAFM,KAEIuB,EAFJ,OAGiCnG,wBAA6BuD,GAH9D,mBAGNgC,EAHM,KAGWa,EAHX,OAI2BpG,mBAAkC,MAJ7D,mBAINH,EAJM,KAIQwG,EAJR,OAKiCrG,mBAAmB,IALpD,mBAKNF,EALM,KAKWwG,EALX,KAiDbC,qBAZ+B,WAC7B,GAAqB,OAAjB1G,EACJ,QAAwB0D,IAApBgC,EACFe,EAAmB,QAEhB,CACH,IACMvB,EADMlF,EAAakC,KAAI,SAAAgB,GAAM,OAAIA,EAAOT,MACzBkE,QAAO,SAAAvC,GAAC,OAAIwC,KAAKC,UAAY,MAClDJ,EAAmBvB,MAIW,CAACQ,EAAiB1F,IAGpD,IAAM8G,EAASC,iBAAmB,MAG5BC,EAAKJ,KAAKK,IAAIC,SAASC,gBAAgBC,aAAe,EAAGC,OAAOC,YAAc,GAC9EC,EAAKX,KAAKK,IAAIC,SAASC,gBAAgBK,cAAgB,EAAGH,OAAOI,aAAe,GAChFC,EAAaV,GAAMO,EAEzB,OACE,cAACI,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO,CAAEC,OAAQP,GAAlC,SACE,eAAC,IAAD,CACEQ,MAAO,CAAC,GAAI,IACZrI,UAAU,YACVsI,UAAW,SAACC,GACV,IAAM/F,EAAM4E,EAAOoB,QACP,OAARhG,GACJA,EAAIiG,kBAENC,UAAWV,EAAa,aAAe,WACvCW,WAAY,GATd,UAWE,qBAAK3I,UAAU,kBAAf,SACE,cAAC,EAAD,CACEM,aAAcA,EACdD,gBArDY,SAACuI,GACrB9B,EAAgB8B,GAhBc,SAACA,GAC/B,IACMC,EADMC,OAAOC,KAAKlE,GAAiBrC,KAAI,SAAAuB,GAAC,OAAIiF,OAAOjF,MACjCkD,QAAO,SAAAvC,GAAC,OAAIwC,KAAKC,UAAY,MAC/C8B,EAAmBJ,EAAYK,QACnC,SAACC,EAAkBpG,GAEjB,OADAoG,EAAIpG,GAAM8B,EAAgB9B,GACnBoG,IAET,SACsBnF,IAApBgC,GAAkC6C,EAAY3E,SAAS8B,IACzDa,OAAmB7C,GAErB4C,EAAYqC,GAKZG,IAoDQ7I,gBAAiBA,EACjBC,OAAQ,SAACgC,GAAD,OAAc4E,EAAOoB,QAAUhG,OAG3C,qBAAKxC,UAAU,QAAf,SACE,cAAC,EAAD,CACEqF,SAAUA,EACVS,WAAYV,EACZY,gBAAiBA,EACjBD,gBA1Da,SAAChD,GAGpB8D,EAFE9D,IAAOiD,OAEUhC,EAGAjB,cC5BVsG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnI,MAAK,YAAkD,IAA/CoI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BX,M","file":"static/js/main.583c6e84.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents, MapConsumer } from \"react-leaflet\";\nimport { Icon, LatLng, LatLngTuple, Map } from \"leaflet\";\nimport { OSMSupermarket } from './OSMData';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport SplitButton from 'react-bootstrap/SplitButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport './MapView.css';\nconst queryOverpass = require('@derhuerst/query-overpass')\n\nconst initialCenter: LatLngTuple = [48.1351, 11.5820]\n\nconst radii = [1, 2, 3, 5, 10, 15]\n\n// See: https://github.com/pointhi/leaflet-color-markers\n// Better alternative? https://github.com/lvoogdt/Leaflet.awesome-markers\nconst blackMarker = new Icon({\n    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png',\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n});\n\nconst goldMarker = new Icon.Default({\n    className: 'huechange-190'\n});\n\nconst redMarker = new Icon.Default({\n    className: 'huechange-140'\n});\n\nconst greenMarker = new Icon.Default({\n    className: 'huechange-280'\n});\n\nconst defaultMarker = new Icon.Default()\n\ntype callbackType = (supermarkets: OSMSupermarket[]) => void\n\nfunction MapView({ onUpdateMarkets, supermarkets, selectedMarkets, setMap }:\n    {\n        onUpdateMarkets: callbackType,\n        supermarkets: OSMSupermarket[] | null,\n        selectedMarkets: number[],\n        setMap: (map: Map) => void\n    }) {\n\n    const [homePosition, setHomePosition] = useState<LatLng | null>(null)\n\n    const updateMarkets = (supermarkets: OSMSupermarket[]) => {\n        onUpdateMarkets(supermarkets)\n    }\n\n    const queryMarkets = (radius: number) => {\n        const pos = homePosition\n        if (pos === null) return\n        const query = `\n            [out:json][timeout:25];\n            node\n                [shop=supermarket]\n                (around:${radius * 1000}, ${pos.lat}, ${pos.lng});\n                out;\n        `;\n        queryOverpass(query, { fetchMode: 'cors' })\n            .then(updateMarkets)\n            .catch(console.error)\n    }\n\n    function MapEvents() {\n        useMapEvents({\n            click: e => {\n                // map.locate()\n                setHomePosition(e.latlng)\n            },\n            locationfound: (location) => {\n                console.log('location found:', location)\n            },\n        })\n        return null\n    }\n\n    const getMarkets = () => {\n        if (supermarkets === null) return null\n\n        function makeMarket(market: OSMSupermarket) {\n            const position: LatLngTuple = [market.lat, market.lon]\n            const data = market.tags\n            const nullableToString = (x: string | undefined) => {\n                return (x !== undefined ? x : '')\n            }\n            const address = `${nullableToString(data[\"addr:street\"])} ${nullableToString(data[\"addr:housenumber\"])},\n            ${nullableToString(data[\"addr:postcode\"])} ${nullableToString(data[\"addr:city\"])}\n            `\n            const icon = selectedMarkets.includes(market.id) ? greenMarker : defaultMarker\n            const marker =\n                <Marker position={position} key={market.id.toString()} icon={icon}>\n                    <Popup>\n                        <Card>\n                            <Card.Body>\n                                <Card.Title>\n                                    {data.name ? data.name : 'Unknown'}\n                                </Card.Title>\n                                {data.brand ? (<Card.Text>{'Brand: ' + data.brand}</Card.Text>) : null}\n                                {data[\"addr:street\"] !== undefined ? (<Card.Text>{address} </Card.Text>) : null}\n                                <Button variant=\"outline-primary\" onClick={_ => updateMarkets([market])}>Find products at this shop</Button>\n                            </Card.Body>\n                        </Card>\n                    </Popup>\n                </Marker>\n            return marker\n        }\n        return supermarkets.map((market, _index, _array) => {\n            return makeMarket(market)\n        })\n    }\n\n    return (\n        <MapContainer center={initialCenter} zoom={13} scrollWheelZoom={false} >\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <MapEvents />\n            <MapConsumer>\n                {(map) => {\n                    console.log('map center:', map.getCenter())\n                    setMap(map)\n                    return null\n                }}\n            </MapConsumer>\n            {/* Marker for center position */}\n            <Marker position={initialCenter} icon={redMarker}>\n                <Popup>\n                    This is Munich on OSM. <br /> Try to click somewhere else.\n                </Popup>\n            </Marker>\n            {homePosition ?\n                <Marker position={homePosition} icon={goldMarker}>\n                    <Popup>\n                        <SplitButton\n                            id='test'\n                            variant=\"outline-primary\"\n                            title={'Find shops'}\n                            onClick={() => queryMarkets(1)}\n                        >\n                            {radii.map(radius => {\n                                return (\n                                    <Dropdown.Item\n                                        eventKey={radius.toString()}\n                                        onClick={() => queryMarkets(radius)}\n                                    >\n                                        {`Radius: ${radius} km`}\n                                    </Dropdown.Item>\n                                )\n                            }\n\n                            )}\n                            <Dropdown.Divider />\n                        </SplitButton>\n    )\n                    </Popup>\n                </Marker> : null\n            }\n            {getMarkets()}\n        </MapContainer>\n    )\n}\n\nexport default MapView;","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './ProductView.css';\n\nexport type product = { name: string, description: string, image?: string }\n\nexport type ProductDict = {\n    [index: number]: product;\n};\n\nexport const exampleProducts: ProductDict = {\n    0: {\n        name: \"Vegan blu\",\n        description: \"A vegan blue cheese\"\n    },\n    1: {\n        name: \"Simply V würzige Genießerscheiben\",\n        description: \"The best\",\n        image: \"https://static.openfoodfacts.org/images/products/426/044/496/0339/front_de.7.full.jpg\"\n    },\n    3: {\n        name: \"Primitivo goes vegan\",\n        description: \"reddish goodness\"\n    },\n    4: {\n        name: \"Chardonnay vegan\",\n        description: \"weird mix of white grapes\"\n    }\n}\n\ntype category = { name: string, products: number[] }\n\nexport const exampleCategories: category[] = [\n    {\n        name: 'Cheeses',\n        products: [\n            0,\n            1,\n            0,\n            1,\n            0,\n            1\n        ]\n    },\n    {\n        name: 'Wines',\n        products: [\n            3,\n            4,\n            3,\n            4,\n            3,\n            4\n        ]\n    }\n]\n\ntype ProductCardProps = {\n    product: product;\n    onClick: () => void;\n    selected: boolean;\n};\n\nfunction ProductCard({ product, onClick, selected }: ProductCardProps) {\n    return (\n        <Card\n            onClick={onClick}\n            bg={selected ? 'primary' : undefined}\n            text={selected ? 'light' : undefined}\n        >\n            {product.image ?\n                (<Card.Img variant=\"top\" src={product.image} className=\"product-img\" />)\n                : (<div className=\"product-img\" />)}\n            <Card.Body>\n                <Card.Title>{product.name}</Card.Title>\n                <Card.Text>\n                    {product.description}\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    )\n}\n\ntype ProductListProps = {\n    categories: category[];\n    products: {\n        [index: number]: product;\n    };\n    onSelectProduct: (_: number) => void;\n    selectedProduct?: number;\n};\n\nfunction ProductList({ categories, products, onSelectProduct, selectedProduct }: ProductListProps) {\n\n    const productList = (ids: number[]) => {\n        return ids.map((id) => {\n            if (products[id] === undefined) return null\n            return (\n                <ProductCard\n                    product={products[id]}\n                    onClick={() => { onSelectProduct(id) }}\n                    selected={selectedProduct === id}\n                    key={id}\n                />\n            )\n        })\n    }\n\n    const categoryComponents = categories.map((category, index, _array) => {\n        return (\n            <Card key={index}>\n                <Accordion.Toggle as={Card.Header} eventKey={index.toString()}>\n                    {category.name}\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={index.toString()}>\n                    <Card.Body>\n                        <div className=\"card-columns\">\n                            {productList(category.products)}\n                        </div>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        )\n    })\n\n    return (\n        <Accordion defaultActiveKey=\"0\">\n            {categoryComponents}\n        </Accordion>\n    )\n}\n\nexport default ProductList","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/Container';\nimport MapView from './MapView';\nimport ProductList, { ProductDict, exampleProducts, exampleCategories } from './ProductList'\nimport { OSMSupermarket } from './OSMData';\nimport Split from 'react-split';\nimport { Map } from 'leaflet';\n\nfunction App() {\n\n  const [products, setProducts] = useState(exampleProducts)\n  const [selectedProduct, setSelectedProduct] = useState<number | undefined>(undefined)\n  const [supermarkets, setSupermarkets] = useState<OSMSupermarket[] | null>(null)\n  const [selectedMarkets, setSelectedMarkets] = useState<number[]>([])\n\n  const filterProductsByMarkets = (markets: OSMSupermarket[]) => {\n    const ids = Object.keys(exampleProducts).map(x => Number(x))\n    const filteredIds = ids.filter(_ => Math.random() >= 0.5)\n    const filteredProducts = filteredIds.reduce(\n      (acc: ProductDict, id) => {\n        acc[id] = exampleProducts[id];\n        return acc\n      },\n      {})\n    if (selectedProduct !== undefined && !filteredIds.includes(selectedProduct)) {\n      setSelectedProduct(undefined)\n    }\n    setProducts(filteredProducts)\n  }\n\n  const updateMarkets = (markets: OSMSupermarket[]) => {\n    setSupermarkets(markets)\n    filterProductsByMarkets(markets)\n  }\n\n  const updateSelected = (id: number) => {\n    if (id === selectedProduct) {\n      // deselect product\n      setSelectedProduct(undefined)\n    }\n    else {\n      setSelectedProduct(id)\n    }\n  }\n\n  const filterMarketsByProduct = () => {\n    if (supermarkets === null) return\n    if (selectedProduct === undefined) {\n      setSelectedMarkets([])\n    }\n    else {\n      const ids = supermarkets.map(market => market.id)\n      const selected = ids.filter(_ => Math.random() >= 0.5)\n      setSelectedMarkets(selected)\n    }\n  }\n\n  useEffect(filterMarketsByProduct, [selectedProduct, supermarkets])\n\n  // Used to refocus the map when its size changes\n  const mapRef = useRef<Map | null>(null);\n\n  // Horizontal or vertical layout?\n  const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n  const horizontal = vw >= vh\n\n  return (\n    <Container fluid style={{ height: vh }}>\n      <Split\n        sizes={[50, 50]}\n        className='full-size'\n        onDragEnd={(_sizes: any) => {\n          const map = mapRef.current\n          if (map === null) return\n          map.invalidateSize()\n        }}\n        direction={horizontal ? 'horizontal' : 'vertical'}\n        gutterSize={20}\n      >\n        <div className='split full-size'>\n          <MapView\n            supermarkets={supermarkets}\n            onUpdateMarkets={updateMarkets}\n            selectedMarkets={selectedMarkets}\n            setMap={(map: Map) => mapRef.current = map}\n          />\n        </div>\n        <div className='split'>\n          <ProductList\n            products={products}\n            categories={exampleCategories}\n            selectedProduct={selectedProduct}\n            onSelectProduct={updateSelected}\n          />\n        </div>\n      </Split>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}