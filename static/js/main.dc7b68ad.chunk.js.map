{"version":3,"sources":["MapView.tsx","ProductList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["queryOverpass","require","initialCenter","goldMarker","Icon","iconUrl","shadowUrl","Default","className","redMarker","greenMarker","defaultMarker","MapView","onUpdateMarkets","supermarkets","selectedMarkets","setMap","useState","homePosition","setHomePosition","updateMarkets","MapEvents","useMapEvents","click","e","latlng","locationfound","location","console","log","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","MapConsumer","map","getCenter","Marker","position","icon","Popup","Button","variant","onClick","pos","query","lat","lng","fetchMode","then","catch","error","market","_index","_array","lon","data","tags","nullableToString","x","undefined","address","includes","id","Card","Body","Title","name","brand","Text","_","toString","makeMarket","getMarkets","exampleProducts","0","description","1","image","3","4","exampleCategories","products","ProductCard","product","selected","bg","text","Img","src","ProductList","categories","onSelectProduct","selectedProduct","categoryComponents","category","index","Accordion","Toggle","as","Header","eventKey","Collapse","Row","ids","Col","xs","md","lg","defaultActiveKey","App","setProducts","setSelectedProduct","setSupermarkets","setSelectedMarkets","useEffect","filter","Math","random","mapRef","useRef","vw","max","document","documentElement","clientWidth","window","innerWidth","vh","clientHeight","innerHeight","horizontal","Container","fluid","style","height","sizes","onDragEnd","_sizes","current","invalidateSize","direction","gutterSize","markets","filteredIds","Object","keys","Number","filteredProducts","reduce","acc","filterProductsByMarkets","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oTAMMA,EAAgBC,EAAQ,IAExBC,EAA6B,CAAC,QAAS,QASvCC,GALc,IAAIC,OAAK,CACzBC,QAAS,mGACTC,UAAW,kFAGI,IAAIF,OAAKG,QAAQ,CAChCC,UAAW,mBAGTC,EAAY,IAAIL,OAAKG,QAAQ,CAC/BC,UAAW,kBAGTE,EAAc,IAAIN,OAAKG,QAAQ,CACjCC,UAAW,kBAGTG,EAAgB,IAAIP,OAAKG,QAiHhBK,MA7Gf,YAMQ,IANWC,EAMZ,EANYA,gBAAiBC,EAM7B,EAN6BA,aAAcC,EAM3C,EAN2CA,gBAAiBC,EAM5D,EAN4DA,OAM5D,EAEqCC,mBAAwB,MAF7D,mBAEIC,EAFJ,KAEkBC,EAFlB,KAIGC,EAAgB,SAACN,GACnBD,EAAgBC,IAkBpB,SAASO,IAUL,OATAC,YAAa,CACTC,MAAO,SAAAC,GAEHL,EAAgBK,EAAEC,SAEtBC,cAAe,SAACC,GACZC,QAAQC,IAAI,kBAAmBF,MAGhC,KAsCX,OACI,eAACG,EAAA,EAAD,CAAcC,OAAQ7B,EAAe8B,KAAM,GAAIC,iBAAiB,EAAhE,UACI,cAACC,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAER,cAACf,EAAD,IACA,cAACgB,EAAA,EAAD,UACK,SAACC,GAGE,OAFAV,QAAQC,IAAI,cAAeS,EAAIC,aAC/BvB,EAAOsB,GACA,QAIf,cAACE,EAAA,EAAD,CAAQC,SAAUvC,EAAewC,KAAMjC,EAAvC,SACI,eAACkC,EAAA,EAAD,qCAC2B,uBAD3B,qCAIHzB,EACG,cAACsB,EAAA,EAAD,CAAQC,SAAUvB,EAAcwB,KAAMvC,EAAtC,SACI,cAACwC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAtFjC,WACjB,IAAMC,EAAM7B,EACZ,GAAY,OAAR6B,EAAJ,CACA,IAAMC,EAAK,qIAIaD,EAAIE,IAJjB,aAIyBF,EAAIG,IAJ7B,sCAOXlD,EAAcgD,EAAO,CAAEG,UAAW,SAC7BC,KAAKhC,GACLiC,MAAMzB,QAAQ0B,SA0EH,wCAEI,KA5DL,WACf,GAAqB,OAAjBxC,EAAuB,OAAO,KA6BlC,OAAOA,EAAawB,KAAI,SAACiB,EAAQC,EAAQC,GACrC,OA5BJ,SAAoBF,GAChB,IAAMd,EAAwB,CAACc,EAAON,IAAKM,EAAOG,KAC5CC,EAAOJ,EAAOK,KACdC,EAAmB,SAACC,GACtB,YAAcC,IAAND,EAAkBA,EAAI,IAE5BE,EAAO,UAAMH,EAAiBF,EAAK,gBAA5B,YAA+CE,EAAiBF,EAAK,qBAArE,0BACXE,EAAiBF,EAAK,kBADX,YACgCE,EAAiBF,EAAK,cADtD,kBAGPjB,EAAO3B,EAAgBkD,SAASV,EAAOW,IAAMxD,EAAcC,EAgBjE,OAdI,cAAC6B,EAAA,EAAD,CAAQC,SAAUA,EAAqCC,KAAMA,EAA7D,SACI,cAACC,EAAA,EAAD,UACI,cAACwB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UACKV,EAAKW,KAAOX,EAAKW,KAAO,YAE5BX,EAAKY,MAAS,cAACJ,EAAA,EAAKK,KAAN,UAAY,UAAYb,EAAKY,QAAsB,UACzCR,IAAxBJ,EAAK,eAAgC,eAACQ,EAAA,EAAKK,KAAN,WAAYR,EAAZ,OAAqC,KAC3E,cAACpB,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,SAAA2B,GAAC,OAAIrD,EAAc,CAACmC,KAA/D,gDATiBA,EAAOW,GAAGQ,YAiBxCC,CAAWpB,MA+BjBqB,O,wBC7HAC,EAA+B,CACxCC,EAAG,CACCR,KAAM,YACNS,YAAa,uBAEjBC,EAAG,CACCV,KAAM,0CACNS,YAAa,WACbE,MAAO,yFAEXC,EAAG,CACCZ,KAAM,uBACNS,YAAa,oBAEjBI,EAAG,CACCb,KAAM,mBACNS,YAAa,8BAMRK,EAAgC,CACzC,CACId,KAAM,UACNe,SAAU,CACN,EACA,IAGR,CACIf,KAAM,QACNe,SAAU,CACN,EACA,KAWZ,SAASC,EAAT,GAAwE,IAAjDC,EAAgD,EAAhDA,QAASzC,EAAuC,EAAvCA,QAAS0C,EAA8B,EAA9BA,SACrC,OACI,eAACrB,EAAA,EAAD,CACIrB,QAASA,EACT2C,GAAID,EAAW,eAAYzB,EAC3B2B,KAAMF,EAAW,aAAUzB,EAH/B,UAKKwB,EAAQN,MAAS,cAACd,EAAA,EAAKwB,IAAN,CAAU9C,QAAQ,MAAM+C,IAAKL,EAAQN,QAAa,GACpE,eAACd,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,UAAakB,EAAQjB,OACrB,cAACH,EAAA,EAAKK,KAAN,UACKe,EAAQR,oBAyDdc,MAzCf,YAAoG,IAA7EC,EAA4E,EAA5EA,WAAYT,EAAgE,EAAhEA,SAAUU,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,gBAiBpDC,EAAqBH,EAAWxD,KAAI,SAAC4D,EAAUC,EAAO1C,GACxD,OACI,eAACU,EAAA,EAAD,WACI,cAACiC,EAAA,EAAUC,OAAX,CAAkBC,GAAInC,IAAKoC,OAAQC,SAAUL,EAAMzB,WAAnD,SACKwB,EAAS5B,OAEd,cAAC8B,EAAA,EAAUK,SAAX,CAAoBD,SAAUL,EAAMzB,WAApC,SACI,cAACP,EAAA,EAAKC,KAAN,UACI,cAACsC,EAAA,EAAD,WAvBCC,EAwBgBT,EAASb,SAvBnCsB,EAAIrE,KAAI,SAAC4B,GACZ,YAAqBH,IAAjBsB,EAASnB,GAA0B,KAEnC,cAAC0C,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,SACI,cAACzB,EAAD,CACIC,QAASF,EAASnB,GAClBpB,QAAS,WAAQiD,EAAgB7B,IACjCsB,SAAUQ,IAAoB9B,KAJNA,eAazBiC,GAjBC,IAACQ,KAgCrB,OACI,cAACP,EAAA,EAAD,CAAWY,iBAAiB,IAA5B,SACKf,K,QCfEgB,MA7Ff,WAAgB,IAAD,EAEmBhG,mBAAS4D,GAF5B,mBAENQ,EAFM,KAEI6B,EAFJ,OAGiCjG,wBAA6B8C,GAH9D,mBAGNiC,EAHM,KAGWmB,EAHX,OAI2BlG,mBAAkC,MAJ7D,mBAINH,EAJM,KAIQsG,EAJR,OAKiCnG,mBAAmB,IALpD,mBAKNF,EALM,KAKWsG,EALX,KAiDbC,qBAZ+B,WAC7B,GAAqB,OAAjBxG,EACJ,QAAwBiD,IAApBiC,EACFqB,EAAmB,QAEhB,CACH,IACM7B,EADM1E,EAAawB,KAAI,SAAAiB,GAAM,OAAIA,EAAOW,MACzBqD,QAAO,SAAA9C,GAAC,OAAI+C,KAAKC,UAAY,MAClDJ,EAAmB7B,MAIW,CAACQ,EAAiBlF,IAGpD,IAAM4G,EAASC,iBAAmB,MAG5BC,EAAKJ,KAAKK,IAAIC,SAASC,gBAAgBC,aAAe,EAAGC,OAAOC,YAAc,GAC9EC,EAAKX,KAAKK,IAAIC,SAASC,gBAAgBK,cAAgB,EAAGH,OAAOI,aAAe,GAChFC,EAAaV,GAAMO,EAEzB,OACE,cAACI,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO,CAAEC,OAAQP,GAAlC,SACE,eAAC,IAAD,CACEQ,MAAO,CAAC,GAAI,IACZnI,UAAU,YACVoI,UAAW,SAACC,GACV,IAAMvG,EAAMoF,EAAOoB,QACP,OAARxG,GACJA,EAAIyG,kBAENC,UAAWV,EAAa,aAAe,WACvCW,WAAY,GATd,UAWE,qBAAKzI,UAAU,kBAAf,SACE,cAAC,EAAD,CACEM,aAAcA,EACdD,gBArDY,SAACqI,GACrB9B,EAAgB8B,GAhBc,SAACA,GAC/B,IACMC,EADMC,OAAOC,KAAKxE,GAAiBvC,KAAI,SAAAwB,GAAC,OAAIwF,OAAOxF,MACjCyD,QAAO,SAAA9C,GAAC,OAAI+C,KAAKC,UAAY,MAC/C8B,EAAmBJ,EAAYK,QACnC,SAACC,EAAkBvF,GAEjB,OADAuF,EAAIvF,GAAMW,EAAgBX,GACnBuF,IAET,SACsB1F,IAApBiC,GAAkCmD,EAAYlF,SAAS+B,IACzDmB,OAAmBpD,GAErBmD,EAAYqC,GAKZG,IAoDQ3I,gBAAiBA,EACjBC,OAAQ,SAACsB,GAAD,OAAcoF,EAAOoB,QAAUxG,OAG3C,qBAAK9B,UAAU,QAAf,SACE,cAAC,EAAD,CACE6E,SAAUA,EACVS,WAAYV,EACZY,gBAAiBA,EACjBD,gBA1Da,SAAC7B,GAGpBiD,EAFEjD,IAAO8B,OAEUjC,EAGAG,cC/BVyF,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBzG,MAAK,YAAkD,IAA/C0G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvC,SAASwC,eAAe,SAM1BX,M","file":"static/js/main.dc7b68ad.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents, MapConsumer } from \"react-leaflet\";\nimport { Icon, LatLng, LatLngTuple, Map } from \"leaflet\";\nimport { OSMSupermarket } from './OSMData';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/esm/Card';\nconst queryOverpass = require('@derhuerst/query-overpass')\n\nconst initialCenter: LatLngTuple = [48.1351, 11.5820]\n\n// See: https://github.com/pointhi/leaflet-color-markers\n// Better alternative? https://github.com/lvoogdt/Leaflet.awesome-markers\nconst blackMarker = new Icon({\n    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-black.png',\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n});\n\nconst goldMarker = new Icon.Default({\n    className: 'huechange-190'\n});\n\nconst redMarker = new Icon.Default({\n    className: 'huechange-140'\n});\n\nconst greenMarker = new Icon.Default({\n    className: 'huechange-280'\n});\n\nconst defaultMarker = new Icon.Default()\n\ntype callbackType = (supermarkets: OSMSupermarket[]) => void\n\nfunction MapView({ onUpdateMarkets, supermarkets, selectedMarkets, setMap }:\n    {\n        onUpdateMarkets: callbackType,\n        supermarkets: OSMSupermarket[] | null,\n        selectedMarkets: number[],\n        setMap: (map: Map) => void\n    }) {\n\n    const [homePosition, setHomePosition] = useState<LatLng | null>(null)\n\n    const updateMarkets = (supermarkets: OSMSupermarket[]) => {\n        onUpdateMarkets(supermarkets)\n    }\n\n    const queryMarkets = () => {\n        const pos = homePosition\n        if (pos === null) return\n        const query = `\n            [out:json][timeout:25];\n            node\n                [shop=supermarket]\n                (around:1000, ${pos.lat}, ${pos.lng});\n                out;\n        `;\n        queryOverpass(query, { fetchMode: 'cors' })\n            .then(updateMarkets)\n            .catch(console.error)\n    }\n\n    function MapEvents() {\n        useMapEvents({\n            click: e => {\n                // map.locate()\n                setHomePosition(e.latlng)\n            },\n            locationfound: (location) => {\n                console.log('location found:', location)\n            },\n        })\n        return null\n    }\n\n    const getMarkets = () => {\n        if (supermarkets === null) return null\n\n        function makeMarket(market: OSMSupermarket) {\n            const position: LatLngTuple = [market.lat, market.lon]\n            const data = market.tags\n            const nullableToString = (x: string | undefined) => {\n                return (x !== undefined ? x : '')\n            }\n            const address = `${nullableToString(data[\"addr:street\"])} ${nullableToString(data[\"addr:housenumber\"])},\n            ${nullableToString(data[\"addr:postcode\"])} ${nullableToString(data[\"addr:city\"])}\n            `\n            const icon = selectedMarkets.includes(market.id) ? greenMarker : defaultMarker\n            const marker =\n                <Marker position={position} key={market.id.toString()} icon={icon}>\n                    <Popup>\n                        <Card>\n                            <Card.Body>\n                                <Card.Title>\n                                    {data.name ? data.name : 'Unknown'}\n                                </Card.Title>\n                                {data.brand ? (<Card.Text>{'Brand: ' + data.brand}</Card.Text>) : null}\n                                {data[\"addr:street\"] !== undefined ? (<Card.Text>{address} </Card.Text>) : null}\n                                <Button variant=\"outline-primary\" onClick={_ => updateMarkets([market])}>Find products at this shop</Button>\n                            </Card.Body>\n                        </Card>\n                    </Popup>\n                </Marker>\n            return marker\n        }\n        return supermarkets.map((market, _index, _array) => {\n            return makeMarket(market)\n        })\n    }\n\n    return (\n        <MapContainer center={initialCenter} zoom={13} scrollWheelZoom={false} >\n            <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <MapEvents />\n            <MapConsumer>\n                {(map) => {\n                    console.log('map center:', map.getCenter())\n                    setMap(map)\n                    return null\n                }}\n            </MapConsumer>\n            {/* Marker for center position */}\n            <Marker position={initialCenter} icon={redMarker}>\n                <Popup>\n                    This is Munich on OSM. <br /> Try to click somewhere else.\n                </Popup>\n            </Marker>\n            {homePosition ?\n                <Marker position={homePosition} icon={goldMarker}>\n                    <Popup>\n                        <Button variant=\"outline-primary\" onClick={queryMarkets}>Find shops around here</Button>\n                    </Popup>\n                </Marker> : null\n            }\n            {getMarkets()}\n        </MapContainer>\n    )\n}\n\nexport default MapView;","import React from 'react';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport type product = { name: string, description: string, image?: string }\n\nexport type ProductDict = {\n    [index: number]: product;\n};\n\nexport const exampleProducts: ProductDict = {\n    0: {\n        name: \"Vegan blu\",\n        description: \"A vegan blue cheese\"\n    },\n    1: {\n        name: \"Simply V würzige Genießerscheiben\",\n        description: \"The best\",\n        image: \"https://static.openfoodfacts.org/images/products/426/044/496/0339/front_de.7.full.jpg\"\n    },\n    3: {\n        name: \"Primitivo goes vegan\",\n        description: \"reddish goodness\"\n    },\n    4: {\n        name: \"Chardonnay vegan\",\n        description: \"weird mix of white grapes\"\n    }\n}\n\ntype category = { name: string, products: number[] }\n\nexport const exampleCategories: category[] = [\n    {\n        name: 'Cheeses',\n        products: [\n            0,\n            1\n        ]\n    },\n    {\n        name: 'Wines',\n        products: [\n            3,\n            4\n        ]\n    }\n]\n\ntype ProductCardProps = {\n    product: product;\n    onClick: () => void;\n    selected: boolean;\n};\n\nfunction ProductCard({ product, onClick, selected }: ProductCardProps) {\n    return (\n        <Card\n            onClick={onClick}\n            bg={selected ? 'primary' : undefined}\n            text={selected ? 'light' : undefined}\n        >\n            {product.image ? (<Card.Img variant=\"top\" src={product.image} />) : ''}\n            <Card.Body>\n                <Card.Title>{product.name}</Card.Title>\n                <Card.Text>\n                    {product.description}\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    )\n}\n\ntype ProductListProps = {\n    categories: category[];\n    products: {\n        [index: number]: product;\n    };\n    onSelectProduct: (_: number) => void;\n    selectedProduct?: number;\n};\n\nfunction ProductList({ categories, products, onSelectProduct, selectedProduct }: ProductListProps) {\n\n    const productList = (ids: number[]) => {\n        return ids.map((id) => {\n            if (products[id] === undefined) return null\n            return (\n                <Col xs={12} md={6} lg={4} key={id}>\n                    <ProductCard\n                        product={products[id]}\n                        onClick={() => { onSelectProduct(id) }}\n                        selected={selectedProduct === id}\n                    />\n                </Col>\n            )\n        })\n    }\n\n    const categoryComponents = categories.map((category, index, _array) => {\n        return (\n            <Card key={index}>\n                <Accordion.Toggle as={Card.Header} eventKey={index.toString()}>\n                    {category.name}\n                </Accordion.Toggle>\n                <Accordion.Collapse eventKey={index.toString()}>\n                    <Card.Body>\n                        <Row>\n                            {productList(category.products)}\n                        </Row>\n                    </Card.Body>\n                </Accordion.Collapse>\n            </Card>\n        )\n    })\n\n    return (\n        <Accordion defaultActiveKey=\"0\">\n            {categoryComponents}\n        </Accordion>\n    )\n}\n\nexport default ProductList","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport MapView from './MapView';\nimport ProductList, { ProductDict, exampleProducts, exampleCategories } from './ProductList'\nimport { OSMSupermarket } from './OSMData';\nimport Split from 'react-split'\nimport { Map } from 'leaflet';\n// const Split = require('react-split')\n\nfunction App() {\n\n  const [products, setProducts] = useState(exampleProducts)\n  const [selectedProduct, setSelectedProduct] = useState<number | undefined>(undefined)\n  const [supermarkets, setSupermarkets] = useState<OSMSupermarket[] | null>(null)\n  const [selectedMarkets, setSelectedMarkets] = useState<number[]>([])\n\n  const filterProductsByMarkets = (markets: OSMSupermarket[]) => {\n    const ids = Object.keys(exampleProducts).map(x => Number(x))\n    const filteredIds = ids.filter(_ => Math.random() >= 0.5)\n    const filteredProducts = filteredIds.reduce(\n      (acc: ProductDict, id) => {\n        acc[id] = exampleProducts[id];\n        return acc\n      },\n      {})\n    if (selectedProduct !== undefined && !filteredIds.includes(selectedProduct)) {\n      setSelectedProduct(undefined)\n    }\n    setProducts(filteredProducts)\n  }\n\n  const updateMarkets = (markets: OSMSupermarket[]) => {\n    setSupermarkets(markets)\n    filterProductsByMarkets(markets)\n  }\n\n  const updateSelected = (id: number) => {\n    if (id === selectedProduct) {\n      // deselect product\n      setSelectedProduct(undefined)\n    }\n    else {\n      setSelectedProduct(id)\n    }\n  }\n\n  const filterMarketsByProduct = () => {\n    if (supermarkets === null) return\n    if (selectedProduct === undefined) {\n      setSelectedMarkets([])\n    }\n    else {\n      const ids = supermarkets.map(market => market.id)\n      const selected = ids.filter(_ => Math.random() >= 0.5)\n      setSelectedMarkets(selected)\n    }\n  }\n\n  useEffect(filterMarketsByProduct, [selectedProduct, supermarkets])\n\n  // Used to refocus the map when its size changes\n  const mapRef = useRef<Map | null>(null);\n\n  // Horizontal or vertical layout?\n  const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)\n  const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\n  const horizontal = vw >= vh\n\n  return (\n    <Container fluid style={{ height: vh }}>\n      <Split\n        sizes={[50, 50]}\n        className='full-size'\n        onDragEnd={(_sizes: any) => {\n          const map = mapRef.current\n          if (map === null) return\n          map.invalidateSize()\n        }}\n        direction={horizontal ? 'horizontal' : 'vertical'}\n        gutterSize={20}\n      >\n        <div className='split full-size'>\n          <MapView\n            supermarkets={supermarkets}\n            onUpdateMarkets={updateMarkets}\n            selectedMarkets={selectedMarkets}\n            setMap={(map: Map) => mapRef.current = map}\n          />\n        </div>\n        <div className=\"split\">\n          <ProductList\n            products={products}\n            categories={exampleCategories}\n            selectedProduct={selectedProduct}\n            onSelectProduct={updateSelected}\n          />\n        </div>\n      </Split>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import 'leaflet/dist/leaflet.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}